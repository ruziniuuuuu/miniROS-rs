name: Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install tools
        run: |
          pip install maturin twine
      
      - name: Update version
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' Cargo.toml
          sed -i 's/dynamic = \["version"\]/version = "${{ steps.version.outputs.version }}"/' pyproject.toml || true
      
      - name: Run tests
        run: cargo test --all-features
      
      - name: Build Rust crate
        run: cargo build --release
      
      - name: Build Python wheels
        run: maturin build --release --features python --out dist/
      
      - name: Publish to crates.io
        if: env.CRATES_IO_TOKEN != ''
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish --token $CRATES_IO_TOKEN
      
      - name: Publish to PyPI
        if: env.PYPI_TOKEN != ''
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*.whl --username __token__ --password $PYPI_TOKEN
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          files: dist/*.whl
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 